name: "Maven Flow Manage Versions"
description: "Manages versions of Maven artifacts to avoid version conflicts between branches in Git Flow"
inputs:
  enforce-branch-version:
    required: true
    type: boolean
  git-user-name:
    description: "GIT user name (to commit changes)"
    default: "github-actions[bot]"
    required: false
    type: string
  git-user-email:
    description: "GIT user email (to commit changes)"
    default: "github-actions[bot]@users.noreply.github.com"
    required: false
    type: string
  maven-args:
    description: "Additional arguments to pass to Maven commands"
    default: ""
    required: false
    type: string
  pom-file:
    description: "Maven POM file"
    default: "pom.xml"
    required: false
    type: string
  token:
    description: "A GitHub token to access private Maven repositories (if needed)"
    default: ""
    required: false
    type: string

outputs:
  changes-made:
    description: "Whether this action modified any files"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:

  - name: Check if branch version is needed
    id: needs-branch-version
    shell: bash
    run: |
      currentBranch="${GITHUB_REF_NAME}"
      echo "Current branch: '$currentBranch' '${{ inputs.token }}'"

      if [[ $currentBranch == "main" || $currentBranch == "master" || $currentBranch == "develop" || $currentBranch == release/* ]]; then
          needsBranchVersion=false
      else
          needsBranchVersion=true
      fi
      echo "Needs branch version: $needsBranchVersion"
      echo "needs=$needsBranchVersion" >> $GITHUB_OUTPUT

  - name: Get project version
    id: get-project-version
    shell: bash
    run: |
      projectVersion=$(mvn -B help:evaluate -Dexpression=project.version -q -DforceStdout --file ${{ inputs.pom-file }} ${{ inputs.maven-args }})
      echo "Project version: $projectVersion"
      echo "version=$projectVersion" >> $GITHUB_OUTPUT

  - name: Enforce branch version
    if: ${{ (inputs.enforce-branch-version) && (steps.needs-branch-version.outputs.needs == 'true') }} # step outputs are always strings
    shell: bash
    run: |
      versionRegexp='^[0-9]+\.[0-9]+\.[0-9].*-[0-9a-zA-Z]+-SNAPSHOT$'
      projectVersion=${{ steps.get-project-version.outputs.version }}

      if [[ $projectVersion =~ $versionRegexp ]]; then
        echo "Project does have a branch version."
      else
        echo "ERROR: Set a branch version to avoid conflicts with main/develop branch. Examples: 1.2.3-JBRFE-SNAPSHOT, 1.2.3-BUG-458-SNAPSHOT, 1.2.3-rc.1-JBRFE-SNAPSHOT, 1.2.3-rc.1-BUG-458-SNAPSHOT";
        exit 1;
      fi

  - name: Set up GIT
    shell: bash
    run: |
      git config --local user.name '${{ inputs.git-user-name }}'
      git config --local user.email '${{ inputs.git-user-email }}'

  - name: Remove branch version
    id: remove-branch-version
    if: ${{ steps.needs-branch-version.outputs.needs == 'false' }} # step outputs are always strings
    shell: bash
    run: |
      versionRegexp='^[0-9]+\.[0-9]+\.[0-9].*-[0-9a-zA-Z]+-SNAPSHOT$'
      projectVersion=${{ steps.get-project-version.outputs.version }}

      if [[ $projectVersion =~ $versionRegexp ]]; then
        echo "Project does have a branch version. I will remove it, since we are on main/develop/release branch."

        prefix=$(echo "$projectVersion" | grep -oE "^[0-9]+\.[0-9]+\.[0-9](\-rc(\.[0-9]+)?)?")
        newVersion="$prefix-SNAPSHOT"
        echo "New version: $newVersion"
        mvn -B versions:set -DnewVersion="$newVersion" versions:commit --file ${{ inputs.pom-file }} ${{ inputs.maven-args }}

        git commit -a -m "Switched to non branch-specific version."
      fi

  - name: Remove dependency branch versions
    id: remove-dependency-branch-versions
    if: ${{ steps.needs-branch-version.outputs.needs == 'false' }} # step outputs are always strings
    shell: bash
    env:
      DEPLOY_GITHUB_TOKEN: ${{ inputs.token }}
    run: |
      changesMade=false
      tempFile=$(mktemp)
      mvn -B dependency:list -DexcludeTransitive=true -DoutputFile="$tempFile" --file ${{ inputs.pom-file }} ${{ inputs.maven-args }}

      versionRegexp='^[0-9]+\.[0-9]+\.[0-9].*-[0-9a-zA-Z]+-SNAPSHOT$'

      lineRegexp="^([^:]+:){4}[^:]+$"

      while IFS= read -r line; do
        if [[ "$line" =~ $lineRegexp ]]; then
          echo ""
          echo "Checking dependency: $line"

          IFS=':' read -ra lineParts <<< "$line"

          group="${lineParts[0]}"
          artifact="${lineParts[1]}"
          version="${lineParts[3]}"

          if [[ $version =~ $versionRegexp ]]; then
            echo "Found a branch-specific version for ${group}:${artifact}. I will remove it."

            prefix=$(echo "$version" | grep -oE "^[0-9]+\.[0-9]+\.[0-9](\-rc(\.[0-9]+)?)?")
            newVersion="$prefix-SNAPSHOT"
            echo "New version: $newVersion"

            mvn -B versions:use-dep-version -DprocessProperties=true -Dincludes=${group}:${artifact} -DdepVersion=${newVersion} -DforceVersion=true --file ${{ inputs.pom-file }} ${{ inputs.maven-args }}

            changesMade=true
          fi
        fi
      done < "$tempFile"

      if [ "$changesMade" = true ]; then
        git commit -a -m "Switched to non branch dependency versions."
        echo "changes-made=true" >> $GITHUB_OUTPUT
      else
        echo "changes-made=false" >> $GITHUB_OUTPUT
      fi
